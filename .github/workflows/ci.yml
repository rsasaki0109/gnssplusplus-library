name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        compiler: [gcc, clang]
        exclude:
          - os: macos-latest
            compiler: gcc

    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libeigen3-dev libgtest-dev cmake build-essential
        if [ "${{ matrix.compiler }}" = "clang" ]; then
          sudo apt-get install -y clang
        fi

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install eigen googletest cmake
        if [ "${{ matrix.compiler }}" = "clang" ]; then
          brew install llvm
        fi

    - name: Configure CMake
      run: |
        if [ "${{ matrix.compiler }}" = "clang" ]; then
          export CC=clang
          export CXX=clang++
        fi
        cmake -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON -DBUILD_EXAMPLES=ON

    - name: Build
      run: cmake --build build --config Release -j$(nproc)

    - name: Run tests
      working-directory: build
      run: ctest --output-on-failure

    - name: Run examples
      working-directory: build
      run: |
        # Create test data directory
        mkdir -p test_data
        # Note: In real usage, you would add actual RINEX test files here
        echo "Examples would run with real RINEX data"

  static-analysis:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libeigen3-dev cppcheck clang-tidy

    - name: Run cppcheck
      run: |
        cppcheck --enable=all --std=c++17 --suppress=missingIncludeSystem \
          --suppress=unusedFunction --error-exitcode=1 include/

    - name: Configure for clang-tidy
      run: |
        cmake -B build -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

    - name: Run clang-tidy
      run: |
        find include/ -name "*.hpp" | xargs clang-tidy -p build/
